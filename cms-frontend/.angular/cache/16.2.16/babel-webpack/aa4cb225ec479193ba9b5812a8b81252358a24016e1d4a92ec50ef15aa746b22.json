{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/category.service\";\nimport * as i3 from \"src/app/services/product.service\";\nimport * as i4 from \"src/app/services/snackbar.service\";\nimport * as i5 from \"src/app/services/bill.service\";\nimport * as i6 from \"ngx-ui-loader\";\nexport let ManageOrderComponent = /*#__PURE__*/(() => {\n  class ManageOrderComponent {\n    constructor(formBuilder, categoryService, productService, snackbarService, billService, ngxService) {\n      this.formBuilder = formBuilder;\n      this.categoryService = categoryService;\n      this.productService = productService;\n      this.snackbarService = snackbarService;\n      this.billService = billService;\n      this.ngxService = ngxService;\n      this.displayedColumns = ['name', 'category', 'price', 'quantity', 'total', 'edit'];\n      this.dataSource = [];\n      this.manageOrderForm = FormGroup;\n      this.categories = [];\n      this.products = [];\n      this.totalAmount = 0;\n    }\n    ngOnInit() {\n      this.ngxService.start();\n      this.manageOrderForm = this.formBuilder.group({\n        name: [null, [Validators.required, Validators.pattern(GlobalConstants.nameRegex)]],\n        email: [null, [Validators.required, Validators.pattern(GlobalConstants.emailRegex)]],\n        contactNumber: [null, [Validators.required, Validators.pattern(GlobalConstants.contactNumberRegex)]],\n        paymentMethod: [null, [Validators.required]],\n        product: [null, [Validators.required]],\n        category: [null, [Validators.required]],\n        quantity: [null, [Validators.required]],\n        price: [null, [Validators.required]],\n        total: [null, [Validators.required]]\n      });\n    }\n    getCategories() {\n      this.categoryService.getCategory().subscribe(response => {\n        this.ngxService.stop();\n        this.categories = response;\n      }, error => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    getProductByCategory(value) {\n      this.productService.getProductsByCategory(value.id).subscribe(response => {\n        this.products = response;\n        this.manageOrderForm.controls['price'].setValue('');\n        this.manageOrderForm.controls['quantity'].setValue('');\n        this.manageOrderForm.controls['total'].setValue('');\n      }, error => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    getProductDetials(value) {\n      this.productService.getById(value.id).subscribe(response => {\n        this.price = response.price;\n        this.manageOrderForm.controls['price'].setValue(response.price);\n        this.manageOrderForm.controls['quantity'].setValue('1');\n        this.manageOrderForm.controls['total'].setValue(this.price * 1);\n      }, error => {\n        this.ngxService.stop();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    setQuantity(value) {\n      let temp = this.manageOrderForm.controls['quantity'].value;\n      if (temp > 0) {\n        this.manageOrderForm.controls['total'].setValue(this.manageOrderForm.controls['quantity'].value * this.manageOrderForm.controls['price'].value);\n      } else if (temp != '') {\n        this.manageOrderForm.controls['quantity'].setValue('1');\n        this.manageOrderForm.controls['total'].setValue(this.manageOrderForm.controls['quantity'].value * this.manageOrderForm.controls['price'].value);\n      }\n    }\n    validateProductAdd() {\n      if (this.manageOrderForm.controls['total'].value === 0 || this.manageOrderForm.controls['total'].value === null || this.manageOrderForm.controls['quantity'].value <= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    validateSubmit() {\n      if (this.totalAmount === 0 || this.manageOrderForm.controls['name'].value === null || this.manageOrderForm.controls['email'].value === null || this.manageOrderForm.controls['contactNumber'].value === null || this.manageOrderForm.controls['paymentMethod'].value === null || !this.manageOrderForm.controls['contactNumber'].valid || !this.manageOrderForm.controls['email'].valid) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    add() {\n      let formData = this.manageOrderForm.value;\n      let productName = this.dataSource.find(e => {\n        e.id == formData.product.id;\n      });\n      if (productName === undefined) {\n        this.totalAmount = this.totalAmount + formData.total;\n        this.dataSource.push({\n          id: formData.product.id,\n          name: formData.product.name,\n          category: formData.product.category.name,\n          quantity: formData.quantity,\n          price: formData.price,\n          total: formData.total\n        });\n        this.dataSource = [...this.dataSource];\n        this.snackbarService.openSnackBar(GlobalConstants.productAdded, \"success\");\n      } else {\n        this.snackbarService.openSnackBar(GlobalConstants.productExistError, GlobalConstants.error);\n      }\n    }\n    handleDeleteAction(value, element) {\n      this.totalAmount = this.totalAmount - element.total;\n      this.dataSource.splice(value, 1);\n      this.dataSource = [...this.dataSource];\n    }\n    submitAction() {\n      this.ngxService.start();\n      let formData = this.manageOrderForm.value;\n      let data = {\n        name: formData.name,\n        email: formData.email,\n        contactNumber: formData.contactNumber,\n        paymentMethod: formData.paymentMethod,\n        totalAmount: this.totalAmount,\n        productDetails: JSON.stringify(this.dataSource)\n      };\n      this.billService.generateReport(data).subscribe(response => {});\n    }\n    static {\n      this.ɵfac = function ManageOrderComponent_Factory(t) {\n        return new (t || ManageOrderComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.ProductService), i0.ɵɵdirectiveInject(i4.SnackbarService), i0.ɵɵdirectiveInject(i5.BillService), i0.ɵɵdirectiveInject(i6.NgxUiLoaderService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ManageOrderComponent,\n        selectors: [[\"app-manage-order\"]],\n        decls: 2,\n        vars: 0,\n        template: function ManageOrderComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"p\");\n            i0.ɵɵtext(1, \"manage-order works!\");\n            i0.ɵɵelementEnd();\n          }\n        }\n      });\n    }\n  }\n  return ManageOrderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}