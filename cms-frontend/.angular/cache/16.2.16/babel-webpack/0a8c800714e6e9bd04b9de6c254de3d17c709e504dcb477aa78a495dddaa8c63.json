{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/category.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/app/services/snackbar.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/flex-layout/flex\";\nfunction CategoryComponent_mat_error_11_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"This is field is mandatory.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CategoryComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, CategoryComponent_mat_error_11_span_1_Template, 2, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.categoryForm.controls.name.errors == null ? null : ctx_r0.categoryForm.controls.name.errors.required);\n  }\n}\nexport let CategoryComponent = /*#__PURE__*/(() => {\n  class CategoryComponent {\n    constructor(dialogData, formBuilder, categoryService, dialogRef, snackbarService) {\n      this.dialogData = dialogData;\n      this.formBuilder = formBuilder;\n      this.categoryService = categoryService;\n      this.dialogRef = dialogRef;\n      this.snackbarService = snackbarService;\n      this.onAddCategory = new EventEmitter();\n      this.onEditCategory = new EventEmitter();\n      this.dialogAction = \"Add\";\n      this.action = \"Add\";\n    }\n    ngOnInit() {\n      this.categoryForm = this.formBuilder.group({\n        name: [null, [Validators.required]]\n      });\n      if (this.dialogData.action === 'Edit') {\n        this.dialogAction = \"Edit\";\n        this.action = \"Update\";\n        this.categoryForm.patchValue(this.dialogData.data);\n      }\n    }\n    handleSubmit() {\n      if (this.dialogAction === \"Edit\") {\n        this.edit();\n      } else {\n        this.add();\n      }\n    }\n    add() {\n      let formData = this.categoryForm.value;\n      let data = {\n        name: formData.name\n      };\n      this.categoryService.add(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onAddCategory.emit();\n        this.responseMessage = response.message;\n        this.snackbarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    edit() {\n      let formData = this.categoryForm.value;\n      let data = {\n        id: this.dialogData.data.id,\n        name: formData.name\n      };\n      this.categoryService.update(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onEditCategory.emit();\n        this.responseMessage = response.message;\n        this.snackbarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        this.dialogRef.close();\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n    static {\n      this.ɵfac = function CategoryComponent_Factory(t) {\n        return new (t || CategoryComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i4.SnackbarService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CategoryComponent,\n        selectors: [[\"app-category\"]],\n        decls: 17,\n        vars: 5,\n        consts: [[1, \"container\"], [1, \"dashboard-title\"], [1, \"mat-typography\"], [3, \"formGroup\"], [\"fxFlex\", \"\", \"fxLayout\", \"column\"], [\"fxLayout\", \"row wrap\"], [\"appearance\", \"fill\", \"fxFlex\", \"\"], [\"matInput\", \"\", \"formControlName\", \"name\", \"required\", \"\"], [4, \"ngIf\"], [\"align\", \"center\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"mat-dialog-close\", \"\"]],\n        template: function CategoryComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"mat-dialog-content\", 2)(4, \"form\", 3)(5, \"div\", 4)(6, \"div\", 5)(7, \"mat-form-field\", 6)(8, \"mat-label\");\n            i0.ɵɵtext(9, \"Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(10, \"input\", 7);\n            i0.ɵɵtemplate(11, CategoryComponent_mat_error_11_Template, 2, 1, \"mat-error\", 8);\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(12, \"mat-dialog-actions\", 9)(13, \"button\", 10);\n            i0.ɵɵlistener(\"click\", function CategoryComponent_Template_button_click_13_listener() {\n              return ctx.handleSubmit();\n            });\n            i0.ɵɵtext(14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"button\", 11);\n            i0.ɵɵtext(16, \"Close\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"\", ctx.dialogData.action, \" Category\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.categoryForm);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngIf\", ctx.categoryForm.controls.name.touched && ctx.categoryForm.controls.name.invalid);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.categoryForm.invalid);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate(ctx.dialogData.action);\n          }\n        },\n        dependencies: [i5.NgIf, i6.MatButton, i3.MatDialogClose, i3.MatDialogContent, i3.MatDialogActions, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatInput, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i9.DefaultLayoutDirective, i9.DefaultFlexDirective],\n        styles: [\".container-dialog[_ngcontent-%COMP%]{padding-bottom:10px}mat-form-field[_ngcontent-%COMP%]{padding:5px}.dashboard-title[_ngcontent-%COMP%]{margin:1rem;padding:1rem;text-align:center;color:#242222}.container[_ngcontent-%COMP%]{padding-bottom:2rem}\"]\n      });\n    }\n  }\n  return CategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}